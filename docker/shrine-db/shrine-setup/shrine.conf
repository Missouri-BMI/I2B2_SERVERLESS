shrine {

  shrineHubBaseUrl = "https://shrine-hub:6443" //The shrine hub's URL as observed from this tomcat server
  i2b2BaseUrl = "http://shrine-dev1.catalyst" //The local i2b2's URL as observed from this tomcat server
  i2b2Domain = "exampleDomain"
  i2b2ShrineProjectName = "SHRINE"
//  api {
//    asyncTimeout = "55 seconds" //For web api requests in shrine-api.war, the "give up" timeout.
//  }
  nodeKey = "testNode" //node key to get information from the hub about this node.

  metaData {
    ping = "pong"
  }

  webclient {
    domain = "foo" //name of the i2b2 PM cell domain used for login
//    name  = "SHRINE"  //name of the i2b2 PM cell project used for login
    siteAdminEmail = "baz@example.com"  //admin email addresss for this site
//    usernameLabel = "User Name"     //text for the label displayed on login
//    passwordLabel = "User Password" //text for the label displayed on login
//    defaultNumberOfOntologyChildren = 10000 //huge default number of children to display in the ontology view
//    queryFlaggingInstructions = "Flag this query at all adapters" //text to guide use of the flagging feature
//    flaggingIconInstructions = "Flag a query"
//    nextStepsUrl = "TODO:  insert next steps URL here"
      helpLinks = {
          "Application Help": "https://open.catalyst.harvard.edu/wiki/display/SHRINE/SHRINE+Webclient+Help+Document",
          "Network Help": "https://www.actnetwork.us/national"
       } //config for application help.
  }//webclient

  pmEndpoint {
  //  urlPath = "/i2b2/services/PMService/getServices" // use your i2b2 pm urlPath, this is appended to i2b2BaseUrl
  }

  ontEndpoint {
  //  urlPath = "/i2b2/services/rest/OntologyService/" //use your i2b2 ontology urlPath, this is appended to i2b2BaseUrl
  }

  hiveCredentials {
    //use your i2b2 hive credentials
   // domain = "i2b2demo"  // defaults to i2b2Domain
    username = "demo"
    crcProjectId = "Demo"
  //  ontProjectId = "SHRINE" //defaults to i2b2ShrineProjectName
  }//hiveCredentials

  breakdownResultOutputTypes {
    //use breakdown values appropriate for your shrine network
//    PATIENT_AGE_COUNT_XML {
//      description = "Demographic Distribution by Age"
//      category= "Demographic"  //category for the breakdown, defaults to Demographic if missing
//    }
//    PATIENT_RACE_COUNT_XML {
//      description = "Demographic Distribution by Race"
//    }
//    PATIENT_VITALSTATUS_COUNT_XML {
//      description = "Demographic Distribution by Vital Status"
//    }
//    PATIENT_GENDER_COUNT_XML {
//      description = "Demographic Distribution by Sex"
//    }
  }//breakdownResultOutputTypes

//  lucene {
//    directory = "/opt/shrine/tomcat/lib/lucene_index"
//    maxSearchResults = 200
//    suggestDirectory = "/opt/shrine/tomcat/lib/suggest_index"
//    suggestCount = 5
//  }

  queryEntryPoint {
    //    create = true //false for no qep
//    audit {
//      collectQepAudit = true //false to not use the 1.20 audit db tables
//      database {
//        dataSourceFrom = "JNDI" //Can be JNDI or testDataSource . Use testDataSource for tests, JNDI everywhere else
//        jndiDataSourceName = "java:comp/env/jdbc/qepAuditDB" //or leave out for tests
    //slickProfileClassName = "slick.jdbc.MySQLProfile$" // Can be
    //        slick.jdbc.H2Profile$
    //        slick.jdbc.MySQLProfile$
    //        slick.jdbc.PostgresProfile$
    //        slick.jdbc.SQLServerProfile$
    //        slick.jdbc.JdbcProfile
    //        slick.jdbc.OracleProfile$
    //        slick.jdbc.SQLServerProfile$
    //
    //        (Yes, with the $ on the end)
    // but will be inferred to a reasonable default via shrine's shrine.shrineDatabaseType property


    // For testing without JNDI
    //      testDataSource {

    //typical test settings for unit tests
    //driverClassName = "org.h2.Driver"

    //url = "jdbc:h2:mem:test;DB_CLOSE_DELAY=-1;MODE=MySQL;" //H2 embedded in-memory for unit tests
    //url = "jdbc:h2:~/stewardTest.h2;MODE=MySQL;" //H2 embedded on disk at ~/test
    //      }//testDataSource

//        timeout = "30 seconds" //time to wait before db gives up, in seconds.
//        createTablesOnStart = false //for testing with H2 in memory, when not running unit tests. Set to false normally
//      }//database
//    }audit

//    sendToHubAttempts = 3 //number of attempts to send a request to run a query to the hub before giving up and reporting a query in error

//    authenticationType = "pm" //can be none, or pm

//    authorizationType = "shrine-steward" //can be none, or shrine-steward

  }//queryEntryPoint

  hub {
//    create = false //change to true to start a hub. If false then the entire hub section can be left out

    //This configuration is only used if no network is found in the hub's database
    //It is loaded into the database when the hub starts if no network is found.
    //To update the network or nodes, use the appropriate curl commands, not this config section.
    //In ifNoNetwork - nodes are added only if the node key does not already exist in the hub's database.
    //todo put a reference to those commads as part of SHRINE-3032
    ifNoNetwork {
      network {
        name = "Shrine Dev Test Network" //Name of your network
        hubQueueName = "hub" //queue used to send messages to the hub, different from the queue used to send messages to a QEP and an adapter colocated with the hub
        adminEmail = "yourname@example.com", //the email address for the admin of the SHRINE hub
      }
      //Nodes in this network
      //In ifNoNetwork - nodes are added only if the node key does not already exist in the hub's database.
      nodes = [
        {
          name = "Shrine Dev1", //human-readable name for this node
          key = "shrineDev1", //machine-friendly key used to identify this node. Never change this.
          userDomainName = "shrine-dev1.catalyst", //domain name for users from this node.
          adminEmail = "yourname@example.com", //the email address for the admin of this node
          queueName = "shrineDev1", //queue used to send messages to the qep and adapter at this node. This field is optional, defautls to the key if not specified
          sendQueries = "false" //true to send queries to an adapter at this node. An optional field, true by default.
        },
        {
          name = "shrine-dev2",
          key = "shrineDev2",
          userDomainName = "shrine-dev2.catalyst",
          adminEmail = "yourname@example.com"
        }
      ]  //nodes
    }//ifNoNetwork

    result {
      resultsOverdueAfter = "5 days" //If a result has not been updated in resultsOverdueAfter move it to error
      overdueResultsCheckPeriod = "6 hours" //How often to check for overdue queries
    }

    client {
   //   serverUrl = "https://shrine-hub:6443" //base URL for the hub, defaults to shrineHubBaseUrl
      //httpClientTimeOut = "10 seconds" //timeout to create a connection with the hub
    }
//    mom {
//      retryDelay = "30 seconds"
//    }

    messagequeue {
      blockingq {
        //serverUrlPath = /shrine-api/mom
        // messageRedeliveryDelay = 1 day
        // messageMaxDeliveryAttempts = -1
        // receiveWaitTime = "50 seconds"
        // messageTimeToLive = 4 days
        // waitTimeBeforeResent = 5 seconds
      }
      // If you intend for your node to serve as this SHRINE network's messaging hub,
      // then set shrine.messagequeue.blockginqWebApi.enabled to true in your shrine.conf.
      // You do not want to do this unless you are the hub admin
      //    blockingqWebApi {
      // enabled = false
      //    }
      //    httpClient {
      //      defaultTimeOut = 10 seconds
      //      timeOutWaitGap = 1 second
      //    }
      //    implementation = "net.shrine.messagequeueclient.MessageQueueWebClient" //Fully-qualified class name of the MessaageQueueService to use
    }//messagequeue
    //allow500ExceptionEndpoints = false //set to true to use /exception API calls to test shrine's response to internal errors
  }//hub

  adapter {
//    create = true by default. False to not create an adapter.
//    crcRunQueryTimeLimit = "30 seconds" //time limit set in requests to the CRC to run a query
//    queuedQueryTimeToLive = "4 days" //time limit to request responces for CRC QUEUED queries
//    queuedQueryPollInterval = "15 seconds" //time between polling the CRC for QUEUED queries
//    queuedQueryRestTimeBeforePolling = "15 seconds" //time before polling the CRC for a QUEUED query after it is first reported as QUEUED
//    queuedQueryCrcPollHttpCallTimeout = "30 seconds" //time allowed for the CRC to reply when polled for a QUEUED query
//    crcClientThreadPoolSize = 12 //i2b2 1.7.09c 's CRC can handle only 15 simultaneious queries per core.
//    adapterMappingsInsertStatement = "INSERT INTO ADAPTER_MAPPING (SHRINE_KEY, ADAPTER_KEY) VALUES (?, ?)" // No semicolons allowed

    crcEndpoint {
      //urlPath = "/i2b2/services/QueryToolService/" //defaults to /i2b2/services/QueryToolService/, this is appended to i2b2BaseUrl
    }
    setSizeObfuscation = true  //must be set. false turns off obfuscation
    adapterMappingsFileName = "AdapterMappings.xml" //defaults to AdapterMappings.csv
    immediatelyRunIncomingQueries = true //false to queue them
//    audit {
//      collectAdapterAudit = true by default. False to not fill in the audit database
//      database {
//        dataSourceFrom = "JNDI" //Can be JNDI or testDataSource . Use testDataSource for tests, JNDI everywhere else
//        jndiDataSourceName = "java:comp/env/jdbc/adapterAuditDB" //or leave out for tests
    //slickProfileClassName = "slick.jdbc.MySQLProfile$" // Can be
    //        slick.jdbc.H2Profile$
    //        slick.jdbc.MySQLProfile$
    //        slick.jdbc.PostgresProfile$
    //        slick.jdbc.SQLServerProfile$
    //        slick.jdbc.JdbcProfile
    //        slick.jdbc.OracleProfile$
    //        slick.jdbc.SQLServerProfile$
    //
    //        (Yes, with the $ on the end)
    // but will be inferred to a reasonable default via shrine's shrine.shrineDatabaseType property


    // For testing without JNDI
    //      testDataSource {

    //typical test settings for unit tests
    //driverClassName = "org.h2.Driver"

    //url = "jdbc:h2:mem:test;DB_CLOSE_DELAY=-1;MODE=MySQL;" //H2 embedded in-memory for unit tests
    //url = "jdbc:h2:~/stewardTest.h2;MODE=MySQL;" //H2 embedded on disk at ~/test
    //      } //testDataSource

        //timeout = "30 seconds" //time to wait before db gives up, in seconds.
    //        createTablesOnStart = false //for testing with H2 in memory, when not running unit tests. Set to false normally
    //      }//database
    //    }//audit
//    obfuscation {
//      binSize = 5 by default //Round to the nearest binSize. Use 1 for no effect (to match SHRINE 1.21 and earlier).
//      sigma = 6.5 by default //Noise to inject. Use 0 for no effect. (Use 1.33 to match SHRINE 1.21 and earlier).
//      clamp = 10 by default //Maximum ammount of noise to inject. (Use 3 to match SHRINE 1.21 and earlier).
//    }

//    botDefense {
//      countsAndMilliseconds = [  //to turn off, use an empty json list
//        {count = 200, milliseconds = 36000000} //allow up to 200 queries in 10 hours by default
//      ]
//   }//audit
  }//adapter

  shrineDatabaseType = "mysql" //can be "sqlserver" "mysql" or "oracle"

  keystore {
    file = "/opt/shrine/shrine.keystore"
    privateKeyAlias = "shrine-dev1.catalyst"
    //keyStoreType = "JKS" // Can be JKS or PKCS12
    caCertAliases = [
      "shrine-dev-ca"
    ]
  }//keystore

//Get the older squerl-basd databases through JNDI (inside of tomcant, using tomcat's db connection pool) or directly via a db config here (for testing
//  squerylDataSource {
//    database {
//      dataSourceFrom = "JNDI" //Can be JNDI or testDataSource . Use testDataSource for tests, JNDI everywhere else
//      jndiDataSourceName = "java:comp/env/jdbc/shrineDB" //or leave out for tests
//    }
//  } //squerylDataSource

  steward {

//    createTopicsMode = Approved  //Can be Pending, Approved, or TopcisIgnoredJustLog. Approved by default
    //Pending - new topics start in the Pending state; researchers must wait for the Steward to approve them
    //Approved - new topics start in the Approved state; researchers can use them immediately
    //TopicsIgnoredJustLog - all queries are logged and approved; researchers don't need to create topics

    emailDataSteward {
//      sendAuditEmails = true  //false to turn off the whole works of emailing the data steward
      //You must provide the email address of the shrine node system admin, to handle bounces and invalid addresses
      //from = "shrine-admin@example.com"
      //You must provide the email address of the data steward
      //to = "shrine-steward@example.com"
      //You must provide the externally-reachable URL for the data steward
      //externalStewardBaseUrl = "https://shrine.example.com:6443/shrine-api/shrine-steward"

//      interval = "1 day" //Audit researchers daily
//      timeAfterMidnight = "6 hours" //Audit researchers at 6 am. If the interval is less than 1 day then this delay is ignored.
//      maxQueryCountBetweenAudits = 30 //If a researcher runs more than this many queries since the last audit audit her
//      minTimeBetweenAudits = "30 days" //If a researcher runs at least one query, audit those queries if this much time has passed

//      subject = "Audit SHRINE researchers"
      //The baseUrl for the data steward to be substituted in to email text. Must be supplied if it is used in the email text.
      //stewardBaseUrl = "https://example.com:8443/steward/"

      //Text to use for the email audit.
      // AUDIT_LINES will be replaced by a researcherLine for each researcher to audit.
      // STEWARD_BASE_URL will be replaced by the value in stewardBaseUrl if available.
//      emailBody = """Please audit the following users at STEWARD_BASE_URL at your earliest convinience:
//
//AUDIT_LINES""" //note that this can be a multiline message

      //Text to use per researcher to audit.
      //FULLNAME, USERNAME, COUNT and LAST_AUDIT_DATE will be replaced with appropriate text.
//      researcherLine = "FULLNAME (USERNAME) has run COUNT queries since LAST_AUDIT_DATE."
    }//emailDataSteward

//    database {
//      dataSourceFrom = "JNDI" //Can be JNDI or testDataSource . Use testDataSource for tests, JNDI everywhere else
//      jndiDataSourceName = "java:comp/env/jdbc/stewardDB" //or leave out for tests
    //slickProfileClassName = "slick.jdbc.MySQLProfile$" // Can be
    //        slick.jdbc.H2Profile$
    //        slick.jdbc.MySQLProfile$
    //        slick.jdbc.PostgresProfile$
    //        slick.jdbc.SQLServerProfile$
    //        slick.jdbc.JdbcProfile
    //        slick.jdbc.OracleProfile$
    //        slick.jdbc.SQLServerProfile$
    //
    //        (Yes, with the $ on the end)
    // but will be inferred to a reasonable default via shrine's shrine.shrineDatabaseType property


    // For testing without JNDI
    //      testDataSource {

    //typical test settings for unit tests
    //driverClassName = "org.h2.Driver"

    //url = "jdbc:h2:mem:test;DB_CLOSE_DELAY=-1;MODE=MySQL;" //H2 embedded in-memory for unit tests
    //url = "jdbc:h2:~/stewardTest.h2;MODE=MySQL;" //H2 embedded on disk at ~/test
    //      } //testDataSource

//      createTablesOnStart = false // true for testing with H2 in memory, when not running unit tests. Set to false normally
//    } // database

//  }//emailDataSteward

//  email {
    //add javax mail properties from https://www.tutorialspoint.com/javamail_api/javamail_api_smtp_servers.htm here
//    javaxmail {
//      mail {
//        smtp {
          //for postfix on localhost
//          host = localhost
//          port = 25

          //for AWS SES - See http://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-using-smtp-java.html
          //        host = email-smtp.us-east-1.amazonaws.com
          //        port = 25
          //        transport.protocol = smtps
          //        auth = true
          //        starttls.enable = true
          //        starttls.required = true
//        }//smtp
//      }//mail
//    }//javamail
    //Must be set for AWS SES. See http://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-using-smtp-java.html
    //    authenticator {
    //      username = yourUsername
    //      password = yourPassword
    //    }
//  }//email

    authenticate {
      usersource
        {
          //type = "PmUserSource" //Must be ConfigUserSource (for isolated testing) or PmUserSource (for everything else)
        }
      //pmProjectName = "ACT" to restrict shrine use to just one project. Leave blank to ignore
    }
  }//shrine